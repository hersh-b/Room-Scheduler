import java.sql.Timestamp;
import java.util.ArrayList;
import java.sql.Date;


/**
 *
 * @author Hersh
 */
public class MainFrame extends javax.swing.JDialog {

    /**
     * Creates new form MainFrame
     */
    public MainFrame(java.awt.Frame parent, boolean modal) {
        initComponents();
        rebuildFacultyComboBoxes(); //Sets it up
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        tabs = new javax.swing.JTabbedPane();
        addFacultyPanel = new javax.swing.JPanel();
        addFacultyLabel = new javax.swing.JLabel();
        addFacultyText = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        addFacultyOutput = new javax.swing.JLabel();
        reservePanel = new javax.swing.JPanel();
        reserveFacultyLabel = new javax.swing.JLabel();
        reserveFacultyCombo = new javax.swing.JComboBox<>();
        reserveDateLabel = new javax.swing.JLabel();
        reserveDateCombo = new javax.swing.JComboBox<>();
        reserveSeatsLabel = new javax.swing.JLabel();
        reserveSeatsInput = new javax.swing.JTextField();
        reserveSubmitButton = new javax.swing.JButton();
        reserveOutputLabel = new javax.swing.JLabel();
        rByPanel = new javax.swing.JPanel();
        rsDateLabel = new javax.swing.JLabel();
        rsCombo = new javax.swing.JComboBox<>();
        rsSubmitButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        rsOutput = new javax.swing.JTextArea();
        waitlistPanel = new javax.swing.JPanel();
        waitlitUpdateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitlistOutput = new javax.swing.JTextArea();
        bannerLabel = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Room Scheduler by Harsheit Budhwar (hvb5276)");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        addFacultyLabel.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        addFacultyLabel.setText("Faculty Name:");

        addFacultyText.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        addFacultyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyTextActionPerformed(evt);
            }
        });

        addFacultyButton.setText("Submit");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        addFacultyOutput.setBackground(new java.awt.Color(0, 0, 0));
        addFacultyOutput.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        addFacultyOutput.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout addFacultyPanelLayout = new javax.swing.GroupLayout(addFacultyPanel);
        addFacultyPanel.setLayout(addFacultyPanelLayout);
        addFacultyPanelLayout.setHorizontalGroup(
            addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(addFacultyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addFacultyText, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addFacultyButton)
                .addContainerGap(200, Short.MAX_VALUE))
            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addFacultyOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        addFacultyPanelLayout.setVerticalGroup(
            addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addFacultyLabel)
                    .addComponent(addFacultyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addFacultyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addFacultyOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(271, Short.MAX_VALUE))
        );

        tabs.addTab("Add Faculty", addFacultyPanel);

        reserveFacultyLabel.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        reserveFacultyLabel.setText("Faculty: ");

        reserveFacultyCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveFacultyComboActionPerformed(evt);
            }
        });

        reserveDateLabel.setText("Date: ");

        reserveDateCombo.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDates().toArray())
        );

        reserveSeatsLabel.setText("Seats required: ");

        reserveSeatsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSeatsInputActionPerformed(evt);
            }
        });

        reserveSubmitButton.setText("Submit");
        reserveSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reservePanelLayout = new javax.swing.GroupLayout(reservePanel);
        reservePanel.setLayout(reservePanelLayout);
        reservePanelLayout.setHorizontalGroup(
            reservePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservePanelLayout.createSequentialGroup()
                .addContainerGap(261, Short.MAX_VALUE)
                .addGroup(reservePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reserveFacultyLabel)
                    .addComponent(reserveSeatsLabel)
                    .addComponent(reserveDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reservePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(reserveDateCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reserveFacultyCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reserveSeatsInput))
                .addGap(27, 27, 27)
                .addComponent(reserveSubmitButton)
                .addGap(286, 286, 286))
            .addGroup(reservePanelLayout.createSequentialGroup()
                .addComponent(reserveOutputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        reservePanelLayout.setVerticalGroup(
            reservePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveFacultyLabel)
                    .addComponent(reserveFacultyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reservePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveDateLabel)
                    .addComponent(reserveDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reserveSubmitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reservePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveSeatsLabel)
                    .addComponent(reserveSeatsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reserveOutputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE))
        );

        tabs.addTab("Reserve", reservePanel);

        rsDateLabel.setText("Select Date: ");

        rsCombo.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDates().toArray())
        );

        rsSubmitButton.setText("Submit");
        rsSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rsSubmitButtonActionPerformed(evt);
            }
        });

        rsOutput.setEditable(false);
        rsOutput.setColumns(20);
        rsOutput.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        rsOutput.setRows(5);
        rsOutput.setWrapStyleWord(true);
        jScrollPane2.setViewportView(rsOutput);

        javax.swing.GroupLayout rByPanelLayout = new javax.swing.GroupLayout(rByPanel);
        rByPanel.setLayout(rByPanelLayout);
        rByPanelLayout.setHorizontalGroup(
            rByPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rByPanelLayout.createSequentialGroup()
                .addGap(255, 255, 255)
                .addComponent(rsDateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(rsSubmitButton)
                .addContainerGap(283, Short.MAX_VALUE))
            .addGroup(rByPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        rByPanelLayout.setVerticalGroup(
            rByPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rByPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rByPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rsDateLabel)
                    .addComponent(rsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rsSubmitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabs.addTab("Reservation by Date", rByPanel);

        waitlitUpdateButton.setText("Display/Update");
        waitlitUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitlitUpdateButtonActionPerformed(evt);
            }
        });

        waitlistOutput.setColumns(20);
        waitlistOutput.setRows(5);
        jScrollPane1.setViewportView(waitlistOutput);

        javax.swing.GroupLayout waitlistPanelLayout = new javax.swing.GroupLayout(waitlistPanel);
        waitlistPanel.setLayout(waitlistPanelLayout);
        waitlistPanelLayout.setHorizontalGroup(
            waitlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waitlistPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(waitlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(waitlitUpdateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE))
                .addContainerGap())
        );
        waitlistPanelLayout.setVerticalGroup(
            waitlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(waitlistPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waitlitUpdateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        tabs.addTab("Waitlist", waitlistPanel);

        bannerLabel.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        bannerLabel.setForeground(new java.awt.Color(0, 0, 150));
        bannerLabel.setText("Room Scheduler");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(289, 289, 289)
                .addComponent(bannerLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bannerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void waitlitUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitlitUpdateButtonActionPerformed
        ArrayList<String> waitlists = new ArrayList<String>(); //Make arraylist
        waitlists = WaitlistQueries.getWaitlistsByDate(); //Get arraylist data
        String output = "";
        for (int i = 0; i < waitlists.size(); i++) //Format
        {
            output += waitlists.get(i) + "\n";
        }
        waitlistOutput.setText(output); //Output
    }//GEN-LAST:event_waitlitUpdateButtonActionPerformed

    private void rsSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rsSubmitButtonActionPerformed
        Date date = Date.valueOf(String.valueOf(rsCombo.getSelectedItem())); //Get date from combo-box
        ArrayList<String> reservations = ReservationQueries.getReservationByDate(date); //Get reservations by date
        String output = "";
        for (int i = 0; i < reservations.size(); i++) //Format
        {
            output += reservations.get(i) + "\n";
        }

        rsOutput.setText(String.valueOf(output)); //Output
    }//GEN-LAST:event_rsSubmitButtonActionPerformed

    private void reserveSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSubmitButtonActionPerformed
        String name = "" + reserveFacultyCombo.getSelectedItem(); //Get inputs
        Date date = Date.valueOf(String.valueOf(reserveDateCombo.getSelectedItem())); 
        Integer seats = Integer.parseInt(reserveSeatsInput.getText()); 
        
        Timestamp time = new Timestamp(System.currentTimeMillis()); //Timestamp using timestamp class

        ArrayList<String> allRooms = RoomQueries.getAllRooms(); //Gets all the existing rooms
        ArrayList<String> notPossibleRooms = ReservationQueries.getRoomsReservedByDate(date); //Gets all the rooms that are taken
        //System.out.println("Not possible: "+notPossibleRooms);
        ArrayList<String> possibleRooms = new ArrayList<String>(); 
        
        for (int i = 0; i < allRooms.size(); i++) //Cross references rooms to find which ones are open
        {
            if (!notPossibleRooms.contains(allRooms.get(i)))
                    {
                        possibleRooms.add(allRooms.get(i));
                    }
        }
        
        //System.out.println("all possible rooms:" + possibleRooms);

        Boolean found = false; 
        int i = 0;
        int rSeats = 0;
        String roomNum = "";
        if (possibleRooms.size() == 0) //If all rooms are booked for the day, waitlist
        {
            WaitlistEntry waitlist = new WaitlistEntry(name, date, seats, time);
            System.out.println("Waitlist made");
            String waitlistResult = String.valueOf(WaitlistQueries.addWaitlistEntry(waitlist));
            if (waitlistResult == "worked")
            {
                reserveOutputLabel.setText("Reservations are full. Waitlist made for " + waitlist.toString());
            }
            else if (waitlistResult == "Already on waitlist")
            {
                reserveOutputLabel.setText("Faculty member already on waitlist for this day"); 
            }
        }
        else{
            while (!found && i < possibleRooms.size()) //Check to reserve
            {
                rSeats = RoomQueries.roomSize(possibleRooms.get(i)); //Gets the rooms size
                if (seats <= rSeats)
                {
                    found = true; //Class fits and is available for the day
                    roomNum = possibleRooms.get(i);
                    System.out.println("Room number: " + roomNum);

                    ReservationEntry reservation = new ReservationEntry(name, roomNum, date, seats, time);

                    if (ReservationQueries.addReservationEntry(reservation) == "worked")
                    {
                        reserveOutputLabel.setText(reservation.toString());
                    }
                    else //Should work but if it doesn't, it'll go here.
                    {
                        System.out.println("ERROR in adding reservation");
                        reserveOutputLabel.setText("There was an error. Please check input.");
                    }

                }
                else
                {
                    //System.out.println("No class found yet"); //Debug
                    i += 1; //Check next class if available.
                }

            }
            if (!found) //If no class found with valid size, add to waitlist
            {
                WaitlistEntry waitlist = new WaitlistEntry(name, date, seats, time);
                System.out.println("Waitlist made");
                String waitlistResult = String.valueOf(WaitlistQueries.addWaitlistEntry(waitlist));
                if (waitlistResult == "worked")
                {
                    reserveOutputLabel.setText("Reservation for capable room(s) full. Waitlist made for " + waitlist.toString());
                }
                else if (waitlistResult == "Already on waitlist")
                {
                    reserveOutputLabel.setText("Faculty member already on waitlist for this day11"); 
                }
            }
        }
    }//GEN-LAST:event_reserveSubmitButtonActionPerformed

    private void reserveSeatsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSeatsInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reserveSeatsInputActionPerformed

    private void reserveFacultyComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveFacultyComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reserveFacultyComboActionPerformed

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyButtonActionPerformed
        // Add the faculty to the faculty table.
        String name = addFacultyText.getText();
        if ("worked".equals(Faculty.addFaculty(name)))
        {
            addFacultyOutput.setText(name+" has been added to the Faculty.");
        }
        else
        {
            if (name.length() > 30)
            {
                addFacultyOutput.setText(name+" is too big of a name."); //Database can only take 30 characters

            }
            else
            {
                addFacultyOutput.setText(name+" is already part of Faculty."); //If it isn't a string size issue, then it has to already exist

            }
        }

        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();
    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void addFacultyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFacultyTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addFacultyTextActionPerformed
 
        public void rebuildFacultyComboBoxes() 
    {
        reserveFacultyCombo.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame dialog = new MainFrame(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JLabel addFacultyLabel;
    private javax.swing.JLabel addFacultyOutput;
    private javax.swing.JPanel addFacultyPanel;
    private javax.swing.JTextField addFacultyText;
    private javax.swing.JLabel bannerLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel rByPanel;
    private javax.swing.JComboBox<String> reserveDateCombo;
    private javax.swing.JLabel reserveDateLabel;
    private javax.swing.JComboBox<String> reserveFacultyCombo;
    private javax.swing.JLabel reserveFacultyLabel;
    private javax.swing.JLabel reserveOutputLabel;
    private javax.swing.JPanel reservePanel;
    private javax.swing.JTextField reserveSeatsInput;
    private javax.swing.JLabel reserveSeatsLabel;
    private javax.swing.JButton reserveSubmitButton;
    private javax.swing.JComboBox<String> rsCombo;
    private javax.swing.JLabel rsDateLabel;
    private javax.swing.JTextArea rsOutput;
    private javax.swing.JButton rsSubmitButton;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTextArea waitlistOutput;
    private javax.swing.JPanel waitlistPanel;
    private javax.swing.JButton waitlitUpdateButton;
    // End of variables declaration//GEN-END:variables
}
